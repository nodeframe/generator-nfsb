{"version":3,"sources":["../src/index.js"],"names":["generators","require","Git","Promise","mkdirp","promisify","path","github","templateList","fs","_","NfsbGenerator","arguments","_repos","_answer","_projectFolder","done","async","search","q","then","res","items","map","v","name","full_name","clone","clone_url","filter","r","split","test","prompt","type","message","default","choices","val","toLowerCase","ans","_answers","kebabCase","url","find","template","Clone","repo","Remote","delete","create","package_path","resolve","json","readFileSync","o","JSON","parse","toString","writeFileSync","stringify","e","console","log","Base","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\nconst generators = require('yeoman-generator');\nconst Git = require(\"nodegit\");\nconst Promise = require('bluebird');\nconst mkdirp = Promise.promisify(require('mkdirp'));\nconst path = require('path');\nconst github = require('./githubApi');\nconst templateList = require('./template-list')();\nconst fs = require('fs');\nconst _ = require('lodash');\n\nclass NfsbGenerator extends generators.Base{\n\n   constructor(){\n     super(...arguments);\n     this._repos = [];\n     this._answer = {};\n     this._projectFolder = 'project';\n   }\n\n   prompting(){\n     var done = this.async();\n      github.search({q:'user:nodeframe'}).then((res)=>{\n       this._repos = res.items.map((v)=>{\n         return {name:v.full_name,clone:v.clone_url}\n       }).filter((r)=>{\n         let v = r.name.split('/')[1];\n         return (/\\-boilerplate$/).test(v) && !(/^generator\\-/).test(v);\n       });\n\n       this.prompt([{\n         type    : 'input',\n         name    : 'name',\n         message : 'project name',\n         default : 'project'\n       },{\n         type    : 'list',\n         name    : 'template',\n         message : 'choose template',\n         choices : this._repos.map((v)=>v.name),\n         filter  : function(val){\n           return val.toLowerCase();\n         }\n       },{\n         type    : 'input',\n         name    : 'repo',\n         message : 'repository'\n       }]).then((ans)=>{\n         this._answers = ans;\n         done();\n       });\n     });\n   }\n\n   makeProjectDirectory(){\n     this._projectFolder = _.kebabCase(this._answers.name);\n     return mkdirp(this._projectFolder);\n   }\n\n   cloneBoilerplate(){\n     let url = this._repos.find((v)=>v.name==this._answers.template).clone;\n     return Git.Clone(url, this._projectFolder)\n       .then((repo)=>{\n         return Git.Remote.delete(repo, 'origin')\n             .then(()=>Git.Remote.create(repo,'prototype',url))\n             .then(()=>(this._answers.repo && this._answers.repo !== '') && Git.Remote.create(repo,'origin',this._answers.repo))\n       });\n   }\n\n   editProjectName(){\n     try{\n       let package_path = path.resolve(this._projectFolder,'package.json');\n       let json = fs.readFileSync(package_path);\n       let o = JSON.parse(json.toString());\n       o.name = this._projectFolder;\n       fs.writeFileSync(package_path,JSON.stringify(o,null,'  '));\n     }catch(e){\n       console.log('cannot edit package.json');\n     }\n   }\n\n}\n\nmodule.exports = NfsbGenerator;\n"]}